//! This file is auto-generated by tools/update_cpu_features.zig.

const std = @import("../std.zig");
const CpuFeature = std.Target.Cpu.Feature;
const CpuModel = std.Target.Cpu.Model;

pub const Feature = enum {
    mos4510,
    mos45gs02,
    mos6502,
    mos6502x,
    mos65c02,
    mos65ce02,
    mos65dtv02,
    mos65el02,
    mos_insns_4510,
    mos_insns_45gs02,
    mos_insns_6502,
    mos_insns_6502bcd,
    mos_insns_6502x,
    mos_insns_65c02,
    mos_insns_65ce02,
    mos_insns_65dtv02,
    mos_insns_65el02,
    mos_insns_huc6280,
    mos_insns_r65c02,
    mos_insns_spc700,
    mos_insns_sweet16,
    mos_insns_w65816,
    mos_insns_w65c02,
    mos_long_register_names,
    moshuc6280,
    mosr65c02,
    mosspc700,
    mossweet16,
    mosw65816,
    mosw65c02,
    static_stack,
};

pub const featureSet = CpuFeature.FeatureSetFns(Feature).featureSet;
pub const featureSetHas = CpuFeature.FeatureSetFns(Feature).featureSetHas;
pub const featureSetHasAny = CpuFeature.FeatureSetFns(Feature).featureSetHasAny;
pub const featureSetHasAll = CpuFeature.FeatureSetFns(Feature).featureSetHasAll;

pub const all_features = blk: {
    const len = @typeInfo(Feature).@"enum".fields.len;
    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);
    var result: [len]CpuFeature = undefined;
    result[@intFromEnum(Feature.mos4510)] = .{
        .llvm_name = "mos4510",
        .description = "CSG 4510",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_4510,
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_65ce02,
            .mos_insns_r65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos45gs02)] = .{
        .llvm_name = "mos45gs02",
        .description = "45GS02",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_4510,
            .mos_insns_45gs02,
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_65ce02,
            .mos_insns_r65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos6502)] = .{
        .llvm_name = "mos6502",
        .description = "Generic MOS 6502, with support for BCD instructions",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos6502x)] = .{
        .llvm_name = "mos6502x",
        .description = "NMOS 6502, with illegal opcode support",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_6502x,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos65c02)] = .{
        .llvm_name = "mos65c02",
        .description = "Generic MOS 65C02",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos65ce02)] = .{
        .llvm_name = "mos65ce02",
        .description = "Commodore 65CE02",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_65ce02,
            .mos_insns_r65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos65dtv02)] = .{
        .llvm_name = "mos65dtv02",
        .description = "The C64DTV's 6502 variant",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65dtv02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos65el02)] = .{
        .llvm_name = "mos65el02",
        .description = "65EL02 virtual machine",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_65el02,
            .mos_insns_w65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mos_insns_4510)] = .{
        .llvm_name = "mos-insns-4510",
        .description = "The new instructions present on CSG 4510",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_45gs02)] = .{
        .llvm_name = "mos-insns-45gs02",
        .description = "The new instructions present on 45GS02",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_6502)] = .{
        .llvm_name = "mos-insns-6502",
        .description = "The original documented 6502 instruction set",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_6502bcd)] = .{
        .llvm_name = "mos-insns-6502bcd",
        .description = "BCD instruction support, including SED and CLD (most 6502 series CPUs support this)",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_6502x)] = .{
        .llvm_name = "mos-insns-6502x",
        .description = "The 'illegal' opcodes present on some early variants of the original 6502 processor",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_65c02)] = .{
        .llvm_name = "mos-insns-65c02",
        .description = "The new and modified instructions present on the generic 65c02 and variants",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_65ce02)] = .{
        .llvm_name = "mos-insns-65ce02",
        .description = "The new and modified instructions present on 65ce02 and variants",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_65dtv02)] = .{
        .llvm_name = "mos-insns-65dtv02",
        .description = "The new and modified instructions present on the C64DTV's 6502 variant",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_65el02)] = .{
        .llvm_name = "mos-insns-65el02",
        .description = "The new and modified instructions present on 65EL02",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_huc6280)] = .{
        .llvm_name = "mos-insns-huc6280",
        .description = "The new and modified instructions present on HuC6280",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_r65c02)] = .{
        .llvm_name = "mos-insns-r65c02",
        .description = "The new and modified instructions present on Rockwell and WDC 65c02",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_spc700)] = .{
        .llvm_name = "mos-insns-spc700",
        .description = "The SPC700 instruction set",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_sweet16)] = .{
        .llvm_name = "mos-insns-sweet16",
        .description = "The SWEET16 instruction set",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_w65816)] = .{
        .llvm_name = "mos-insns-w65816",
        .description = "The new and modified instructions present on WDC 65816",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_insns_w65c02)] = .{
        .llvm_name = "mos-insns-w65c02",
        .description = "The new and modified instructions present on WDC 65c02",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mos_long_register_names)] = .{
        .llvm_name = "mos-long-register-names",
        .description = "Requires llvm_mos_* prefixes to all registers. Useful if your code has variable names that conflict with llvm-mos register names",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.moshuc6280)] = .{
        .llvm_name = "moshuc6280",
        .description = "Hudson Soft HuC6280",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_huc6280,
            .mos_insns_r65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mosr65c02)] = .{
        .llvm_name = "mosr65c02",
        .description = "Rockwell 65C02",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_r65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mosspc700)] = .{
        .llvm_name = "mosspc700",
        .description = "Sony 6502-like CPUs, including the SPC700",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_spc700,
        }),
    };
    result[@intFromEnum(Feature.mossweet16)] = .{
        .llvm_name = "mossweet16",
        .description = "MOS 6502 compatible with SWEET16 virtual machine support",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_sweet16,
        }),
    };
    result[@intFromEnum(Feature.mosw65816)] = .{
        .llvm_name = "mosw65816",
        .description = "WDC 65816",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_w65816,
            .mos_insns_w65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.mosw65c02)] = .{
        .llvm_name = "mosw65c02",
        .description = "WDC 65C02",
        .dependencies = featureSet(&[_]Feature{
            .mos_insns_6502,
            .mos_insns_6502bcd,
            .mos_insns_65c02,
            .mos_insns_r65c02,
            .mos_insns_w65c02,
            .static_stack,
        }),
    };
    result[@intFromEnum(Feature.static_stack)] = .{
        .llvm_name = "static-stack",
        .description = "Whether to use statically-allocated stack frames if possible.",
        .dependencies = featureSet(&[_]Feature{}),
    };
    const ti = @typeInfo(Feature);
    for (&result, 0..) |*elem, i| {
        elem.index = i;
        elem.name = ti.@"enum".fields[i].name;
    }
    break :blk result;
};

pub const cpu = struct {
    pub const mos4510 = CpuModel{
        .name = "mos4510",
        .llvm_name = "mos4510",
        .features = featureSet(&[_]Feature{
            .mos4510,
        }),
    };
    pub const mos45gs02 = CpuModel{
        .name = "mos45gs02",
        .llvm_name = "mos45gs02",
        .features = featureSet(&[_]Feature{
            .mos45gs02,
        }),
    };
    pub const mos6502 = CpuModel{
        .name = "mos6502",
        .llvm_name = "mos6502",
        .features = featureSet(&[_]Feature{
            .mos6502,
        }),
    };
    pub const mos6502x = CpuModel{
        .name = "mos6502x",
        .llvm_name = "mos6502x",
        .features = featureSet(&[_]Feature{
            .mos6502x,
        }),
    };
    pub const mos65c02 = CpuModel{
        .name = "mos65c02",
        .llvm_name = "mos65c02",
        .features = featureSet(&[_]Feature{
            .mos65c02,
        }),
    };
    pub const mos65ce02 = CpuModel{
        .name = "mos65ce02",
        .llvm_name = "mos65ce02",
        .features = featureSet(&[_]Feature{
            .mos65ce02,
        }),
    };
    pub const mos65dtv02 = CpuModel{
        .name = "mos65dtv02",
        .llvm_name = "mos65dtv02",
        .features = featureSet(&[_]Feature{
            .mos65dtv02,
        }),
    };
    pub const mos65el02 = CpuModel{
        .name = "mos65el02",
        .llvm_name = "mos65el02",
        .features = featureSet(&[_]Feature{
            .mos65el02,
        }),
    };
    pub const moshuc6280 = CpuModel{
        .name = "moshuc6280",
        .llvm_name = "moshuc6280",
        .features = featureSet(&[_]Feature{
            .moshuc6280,
        }),
    };
    pub const mosr65c02 = CpuModel{
        .name = "mosr65c02",
        .llvm_name = "mosr65c02",
        .features = featureSet(&[_]Feature{
            .mosr65c02,
        }),
    };
    pub const mosspc700 = CpuModel{
        .name = "mosspc700",
        .llvm_name = "mosspc700",
        .features = featureSet(&[_]Feature{
            .mosspc700,
        }),
    };
    pub const mossweet16 = CpuModel{
        .name = "mossweet16",
        .llvm_name = "mossweet16",
        .features = featureSet(&[_]Feature{
            .mossweet16,
        }),
    };
    pub const mosw65816 = CpuModel{
        .name = "mosw65816",
        .llvm_name = "mosw65816",
        .features = featureSet(&[_]Feature{
            .mosw65816,
        }),
    };
    pub const mosw65c02 = CpuModel{
        .name = "mosw65c02",
        .llvm_name = "mosw65c02",
        .features = featureSet(&[_]Feature{
            .mosw65c02,
        }),
    };
};
