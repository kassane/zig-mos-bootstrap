# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -mcpu=mosspc700 -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @.str = constant [1 x i8] c"X"
  define void @br_indirect() {
    entry:
      ret void
  }
  define void @ldimm_local() "nonreentrant" {
    entry:
      ret void
  }
  define void @unmerge_local() "nonreentrant" {
    entry:
      ret void
  }
  define void @ldimm_global() {
    entry:
      ret void
  }
  define void @ldimm_global_offset() {
    entry:
      ret void
  }
  define void @ldimm_zp_global() {
    entry:
      ret void
  }
  define void @ldimm_zp_global_offset() {
    entry:
      ret void
  }
  define void @unmerge_global() {
    entry:
      ret void
  }
---
name: br_indirect
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: br_indirect
    ; CHECK: [[LDImm16SPC700_:%[0-9]+]]:imag16 = LDImm16SPC700 blockaddress(@br_indirect, %ir-block.entry)
    ; CHECK-NEXT: [[LDImm:%[0-9]+]]:xc = LDImm 0
    ; CHECK-NEXT: JMPIndir [[LDImm16SPC700_]], implicit killed [[LDImm]]
    ; CHECK-NEXT: RTS
    %0:any(p0) = G_BLOCK_ADDR blockaddress(@br_indirect, %ir-block.entry)
    G_BRINDIRECT %0
    RTS
...
---
name: ldimm_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_local
    ; CHECK: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %stack.0, 0
    ; CHECK-NEXT: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %stack.0, 0, [[AddrLostk1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: unmerge_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: unmerge_local
    ; CHECK: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %stack.0, 0
    ; CHECK-NEXT: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %stack.0, 0, [[AddrLostk1]]
    ; CHECK-NEXT: RTS implicit [[AddrLostk]], implicit [[AddrHistk]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    %1:any(s8), %2:any(s8) = G_UNMERGE_VALUES %0
    RTS implicit %1, implicit %2
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: ldimm_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_global
    ; CHECK: [[LDImm16SPC700_:%[0-9]+]]:imag16 = LDImm16SPC700 @.str
    ; CHECK-NEXT: RTS implicit [[LDImm16SPC700_]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    RTS implicit %0
...
---
name: ldimm_global_offset
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_global_offset
    ; CHECK: [[LDImm16SPC700_:%[0-9]+]]:imag16 = LDImm16SPC700 @.str + 1234
    ; CHECK-NEXT: RTS implicit [[LDImm16SPC700_]]
    %0:any(p0) = G_GLOBAL_VALUE @.str + 1234
    RTS implicit %0
...
---
name: ldimm_zp_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_zp_global
    ; CHECK: [[LDImm_:%[0-9]+]]:anyi8 = LDImm @.str
    ; CHECK-NEXT: RTS implicit [[LDImm_]]
    %0:any(p1) = G_GLOBAL_VALUE @.str
    RTS implicit %0
...
---
name: ldimm_zp_global_offset
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_zp_global_offset
    ; CHECK: [[LDImm_:%[0-9]+]]:anyi8 = LDImm @.str + 123
    ; CHECK-NEXT: RTS implicit [[LDImm_]]
    %0:any(p1) = G_GLOBAL_VALUE @.str + 123
    RTS implicit %0
...
---
name: unmerge_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: unmerge_global
    ; CHECK: [[LDImm_:%[0-9]+]]:anyi8 = LDImm target-flags(lo) @.str
    ; CHECK-NEXT: [[LDImm_1:%[0-9]+]]:anyi8 = LDImm target-flags(hi) @.str
    ; CHECK-NEXT: RTS implicit [[LDImm_]], implicit [[LDImm_1]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    %1:any(s8), %2:any(s8) = G_UNMERGE_VALUES %0
    RTS implicit %1, implicit %2
...
