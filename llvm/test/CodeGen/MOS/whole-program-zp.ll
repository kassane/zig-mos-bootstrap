; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -O2 --filetype=asm -zp-avail=1 < %s | FileCheck %s

target datalayout = "e-m:e-p:16:8-p1:8:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos-sim"

@hot = global i8 0, align 1
@cold = global i8 0, align 1

define internal void @hot_func() norecurse {
; CHECK-LABEL: hot_func:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    inc mos8(hot)
; CHECK-NEXT:    rts
entry:
  %0 = load i8, ptr @hot, align 1
  %inc = add i8 %0, 1
  store i8 %inc, ptr @hot, align 1
  ret void
}

define void @cold_func() norecurse {
; CHECK-LABEL: cold_func:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    lda __rc20
; CHECK-NEXT:    pha
; CHECK-NEXT:    lda __rc21
; CHECK-NEXT:    pha
; CHECK-NEXT:    inc cold
; CHECK-NEXT:    ldx #48
; CHECK-NEXT:    ldy #57
; CHECK-NEXT:    sty __rc20
; CHECK-NEXT:    stx __rc21
; CHECK-NEXT:  .LBB1_1: ; %for.body
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    jsr hot_func
; CHECK-NEXT:    ldx #255
; CHECK-NEXT:    dec __rc20
; CHECK-NEXT:    cpx __rc20
; CHECK-NEXT:    beq .LBB1_4
; CHECK-NEXT:  ; %bb.2: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    lda __rc21
; CHECK-NEXT:    bne .LBB1_1
; CHECK-NEXT:  .LBB1_3: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    lda __rc20
; CHECK-NEXT:    bne .LBB1_1
; CHECK-NEXT:    jmp .LBB1_5
; CHECK-NEXT:  .LBB1_4: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    dec __rc21
; CHECK-NEXT:    lda __rc21
; CHECK-NEXT:    bne .LBB1_1
; CHECK-NEXT:    jmp .LBB1_3
; CHECK-NEXT:  .LBB1_5: ; %for.cond.cleanup
; CHECK-NEXT:    pla
; CHECK-NEXT:    sta __rc21
; CHECK-NEXT:    pla
; CHECK-NEXT:    sta __rc20
; CHECK-NEXT:    rts
entry:
  %0 = load i8, ptr @cold, align 1
  %inc = add i8 %0, 1
  store i8 %inc, ptr @cold, align 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %entry, %for.body
  %i.03 = phi i16 [ 0, %entry ], [ %inc1, %for.body ]
  tail call void @hot_func()
  %inc1 = add nuw nsw i16 %i.03, 1
  %exitcond.not = icmp eq i16 %inc1, 12345
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; CHECK-LABEL: .type hot,@object
; CHECK-NEXT:  .section .zp.bss,"aw",@nobits

; CHECK-LABEL: .type cold,@object
; CHECK-NEXT:  .bss
