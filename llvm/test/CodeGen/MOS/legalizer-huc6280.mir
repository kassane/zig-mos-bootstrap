# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -mcpu=moshuc6280 -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck %s

--- |
  define i16 @memcpy_to_tii() #0 {
    ret i16 1
  }

  define i16 @memset_to_tii() #0 {
    ret i16 1
  }

  define i16 @memcpy_to_multiple_tii() #0 {
    ret i16 1
  }

  define i16 @memset_to_multiple_tii() #0 {
    ret i16 1
  }

  define i16 @load_constant_zp_addr_negative() #0 {
    ret i16 1
  }

  define i16 @load_zp_ptr() #0 {
    ret i16 1
  }

  define i16 @load_zp_ptradd_const8() #0 {
    ret i16 1
  }

  define i16 @addrspace_cast_data_zp() #0 {
    ret i16 1
  }

  define i16 @addrspace_cast_zp_data() #0 {
    ret i16 1
  }

  attributes #0 = { optsize }
---
name: memcpy_to_tii
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: memcpy_to_tii
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: HuCMemcpy 8704, 8960, 6, 0 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)`), (store (s8) into `ptr inttoptr (i16 8960 to ptr)`)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 6
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMCPY %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memset_to_tii
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: memset_to_tii
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s8) = COPY [[C]](s8)
    ; CHECK-NEXT: G_STORE_ABS [[COPY]](s8), 8960 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`)
    ; CHECK-NEXT: HuCMemcpy 8960, 8961, 5, 0 :: (load (s8) from `ptr inttoptr (i16 8960 to ptr)`), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 1)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s16) = G_CONSTANT i16 6
    %4:_(s16) = G_CONSTANT i16 0
    G_MEMSET %0:_(p0), %2:_(s8), %3:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256); example.c:11:3
    RTS implicit %4
...
---
name: memcpy_to_multiple_tii
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: memcpy_to_multiple_tii
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: HuCMemcpy 8704, 8960, 16, 0 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)`), (store (s8) into `ptr inttoptr (i16 8960 to ptr)`)
    ; CHECK-NEXT: HuCMemcpy 8720, 8976, 16, 0 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 16), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 16)
    ; CHECK-NEXT: HuCMemcpy 8736, 8992, 6, 0 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 32), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 32)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 38
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMCPY %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memset_to_multiple_tii
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: memset_to_multiple_tii
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s8) = COPY [[C]](s8)
    ; CHECK-NEXT: G_STORE_ABS [[COPY]](s8), 8960 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`)
    ; CHECK-NEXT: HuCMemcpy 8960, 8961, 16, 0 :: (load (s8) from `ptr inttoptr (i16 8960 to ptr)`), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 1)
    ; CHECK-NEXT: HuCMemcpy 8976, 8977, 16, 0 :: (load (s8) from `ptr inttoptr (i16 8960 to ptr)` + 16), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 17)
    ; CHECK-NEXT: HuCMemcpy 8992, 8993, 5, 0 :: (load (s8) from `ptr inttoptr (i16 8960 to ptr)` + 32), (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 33)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s16) = G_CONSTANT i16 38
    %4:_(s16) = G_CONSTANT i16 0
    G_MEMSET %0:_(p0), %2:_(s8), %3:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256); example.c:11:3
    RTS implicit %4
...
---
name: load_constant_zp_addr_negative
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: load_constant_zp_addr_negative
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS target-flags(zeropage) 8384 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(s8) = G_CONSTANT i8 -64
    %1:_(p1) = G_INTTOPTR %0
    %2:_(s8) = G_LOAD %1 :: (load (s8))
    RTS implicit %2
...
---
name: load_zp_ptr
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: load_zp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 8192, [[PTRTOINT]](s8) :: (load (s8))
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[LOAD_ZP_IDX]](s8)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p1)
    %0:_(p1) = COPY $rc0
    %1:_(p1) = G_LOAD %0 :: (load 1)
    RTS implicit %1
...
---
name: load_zp_ptradd_const8
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: load_zp_ptradd_const8
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 8447, [[PTRTOINT]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ZP_IDX]](s8)
    %0:_(p1) = COPY $rc0
    %2:_(s8) = G_CONSTANT i8 255
    %3:_(p1) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: addrspace_cast_data_zp
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: addrspace_cast_data_zp
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[COPY]](s16)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p1) = G_INTTOPTR [[TRUNC]](s8)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[INTTOPTR1]](p1)
    ; CHECK-NEXT: RTS implicit [[PTRTOINT1]](s8)
    %0:_(s16) = COPY $rs2
    %1:_(p0) = G_INTTOPTR %0:_(s16)
    %2:_(p1) = G_ADDRSPACE_CAST %1:_(p0)
    %3:_(s8) = G_PTRTOINT %2:_(p1)
    RTS implicit %3
...
---
name: addrspace_cast_zp_data
body: |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: addrspace_cast_zp_data
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[COPY]](s8)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[INTTOPTR]](p1)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 32
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s8) = G_OR [[PTRTOINT]], [[C]]
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s8) = G_OR [[C]], [[C1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[OR]](s8), [[OR1]](s8)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR1]](p0)
    ; CHECK-NEXT: RTS implicit [[PTRTOINT1]](s16)
    %0:_(s8) = COPY $rc2
    %1:_(p1) = G_INTTOPTR %0:_(s8)
    %2:_(p0) = G_ADDRSPACE_CAST %1:_(p1)
    %3:_(s16) = G_PTRTOINT %2:_(p0)
    RTS implicit %3
...
